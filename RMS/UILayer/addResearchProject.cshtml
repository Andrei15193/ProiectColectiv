@using ResourceManagementSystem.BusinessLogic;
@using ResourceManagementSystem.BusinessLogic.Entities;
@using ResourceManagementSystem.BusinessLogic.Workflow;
@using System.Text.RegularExpressions;

@{   
    Layout = "~/Views/Layouts/_MainLayout.cshtml";
    Page.Title = "Add Research Project";

    bool hasError = false;
    int step = 0;
    const int lastStep = 9;
    string errorMessage = string.Empty;
    string requestStep = IsPost ? Request["step"] : null;
    IEnumerable<Member> members = null;
    if (requestStep == null || !int.TryParse(requestStep, out step) || step > lastStep)
    {
        step = 0;
    }
    ResearchProjectViewModel researchProjectsViewModel = Session["researchProjectViewModel"] as ResearchProjectViewModel ?? ViewModelFactory.ResearchProjectViewModel;
    Session["researchProjectViewModel"] = researchProjectsViewModel;

    switch (step)
    {
        case 1:
            researchProjectsViewModel.Title = Request["title"];
            researchProjectsViewModel.Description = Request["description"];
            researchProjectsViewModel.StartDate = Request["startDate"];
            researchProjectsViewModel.EndDate = Request["endDate"];
            hasError = !researchProjectsViewModel.TryGetAllHumanResources(out errorMessage, out members);
            if (hasError)
            {
                step = 0;
            }
            break;
        case 2:
            researchProjectsViewModel.SelectedTeamEmails = Request.Form.AllKeys;
            hasError = !researchProjectsViewModel.TryCreateResearchProject(out errorMessage);
            if (hasError)
            {
                step = 0;
            }
            else
            {
                researchProjectsViewModel.Title = string.Empty;
                researchProjectsViewModel.Description = string.Empty;
                researchProjectsViewModel.StartDate = DateTime.Now.ToString("dd/MM/yyyy");
                researchProjectsViewModel.EndDate = DateTime.Now.AddDays(10).ToString("dd/MM/yyyy");
                step = 3;
            }
            break;
        case 5:
            researchProjectsViewModel.Title = Request["title"];
            researchProjectsViewModel.Description = Request["description"];
            researchProjectsViewModel.StartDate = Request["startDate"];
            researchProjectsViewModel.EndDate = Request["endDate"];
            hasError = !researchProjectsViewModel.TryCreatePhase(out errorMessage);
            if (hasError)
            {
                step = 4;
            }
            else
            {
                researchProjectsViewModel.Title = string.Empty;
                researchProjectsViewModel.Description = string.Empty;
                researchProjectsViewModel.StartDate = DateTime.Now.ToString("dd/MM/yyyy");
                researchProjectsViewModel.EndDate = DateTime.Now.AddDays(10).ToString("dd/MM/yyyy");
                step = 6;
            }
            break;
        case 6:
            researchProjectsViewModel.Title = string.Empty;
            researchProjectsViewModel.Description = string.Empty;
            researchProjectsViewModel.StartDate = DateTime.Now.ToString("dd/MM/yyyy");
            researchProjectsViewModel.EndDate = DateTime.Now.AddDays(10).ToString("dd/MM/yyyy");
            researchProjectsViewModel.LaborCost = 0;
            researchProjectsViewModel.LaborCostSelectedIndex = 0;
            researchProjectsViewModel.MobilityCost = 0;
            researchProjectsViewModel.MobilityCostSelectedIndex = 0;
            researchProjectsViewModel.LogisticalCost = 0;
            researchProjectsViewModel.LogisticalCostSelectedIndex = 0;
            researchProjectsViewModel.IsConfidential = false;
            break;
        case 8:
            researchProjectsViewModel.Title = Request["title"];
            researchProjectsViewModel.Description = Request["description"];
            researchProjectsViewModel.StartDate = Request["startDate"];
            researchProjectsViewModel.EndDate = Request["endDate"];
            researchProjectsViewModel.LaborCost = (Request["laborCost"] == string.Empty ? 0 : int.Parse(Request["laborCost"]));
            researchProjectsViewModel.LaborCostSelectedIndex = int.Parse(Request["laborCostSelectedIndex"]);
            researchProjectsViewModel.MobilityCost = (Request["mobilityCost"] == string.Empty ? 0 : int.Parse(Request["mobilityCost"]));
            researchProjectsViewModel.MobilityCostSelectedIndex = int.Parse(Request["mobilityCostSelectedIndex"]);
            researchProjectsViewModel.LogisticalCost = (Request["logisticalCost"] == string.Empty ? 0 : int.Parse(Request["logisticalCost"]));
            researchProjectsViewModel.LogisticalCostSelectedIndex = int.Parse(Request["logisticalCostSelectedIndex"]);
            researchProjectsViewModel.IsConfidential = Request["isConfidential"] != null;
            researchProjectsViewModel.SelectedTeamEmails = Request.Form.AllKeys.Where((key) => Regex.IsMatch(key, Constants.EmailCheckRegex));
            hasError = !researchProjectsViewModel.TryCreateActivity(out errorMessage);
            if (hasError)
            {
                step = 7;
            }
            else
            {
                step = 6;
                researchProjectsViewModel.Title = string.Empty;
                researchProjectsViewModel.Description = string.Empty;
                researchProjectsViewModel.StartDate = DateTime.Now.ToString("dd/MM/yyyy");
                researchProjectsViewModel.EndDate = DateTime.Now.AddDays(10).ToString("dd/MM/yyyy");
                researchProjectsViewModel.LaborCost = 0;
                researchProjectsViewModel.LaborCostSelectedIndex = 0;
                researchProjectsViewModel.MobilityCost = 0;
                researchProjectsViewModel.MobilityCostSelectedIndex = 0;
                researchProjectsViewModel.LogisticalCost = 0;
                researchProjectsViewModel.LogisticalCostSelectedIndex = 0;
                researchProjectsViewModel.IsConfidential = false;
            }
            break;
        case 9:
            hasError = !researchProjectsViewModel.TrySaveResearchProject(out errorMessage);
            if (!hasError)
            {
                Session.Remove("title");
                Session.Remove("description");
                Session.Remove("startDate");
                Session.Remove("endDate");
                Session.Remove("laborCost");
                Session.Remove("laborCostSelectedIndex");
                Session.Remove("mobilityCost");
                Session.Remove("mobilityCostSelectedIndex");
                Session.Remove("logisticalCost");
                Session.Remove("logisticalCostSelectedIndex");
                Session.Remove("isConfidential");
                Session.Remove("researchProjectViewModel");
                researchProjectsViewModel.Title = string.Empty;
                researchProjectsViewModel.Description = string.Empty;
                researchProjectsViewModel.StartDate = DateTime.Now.ToString("dd/MM/yyyy");
                researchProjectsViewModel.EndDate = DateTime.Now.AddDays(10).ToString("dd/MM/yyyy");
                step = 0;
            }
            else
            {
                // TO DO: phase edit/remove activity: edit/remove before research project submit
                step = 0;
            }
            break;
    }
}

@section body{
    <ul class="nav nav-tabs">
        @if (step <= 3)
        {
            <li class="active"><a>Add Research Project</a></li>
        }
        else if (step <= 6)
        {
            <li class="active"><a>Add Research Project :: Add Research Phase</a></li>
        }
        else if (step <= lastStep)
        {
            <li class="active"><a>Add Research Project :: Add Research Phase :: Add Research Activity</a></li>
        }
    </ul>
    @if (hasError)
    {
        <h1>Error!</h1>
        <p>@errorMessage</p>
        <p>We are terebly sorry for the inconvenience...</p>
        <form action="addResearchProject.cshtml" class="form-horizontal" method="post">
            <input type="hidden" name="step" id="step" value="@step" />
            <input type="submit" value="Back" />
        </form>
    }
    else
    {
        switch (step)
        {
            case 0:
                // Show Research Project Form
        <div class="well">
            <form action="addResearchProject.cshtml" class="form-horizontal" method="post">
                <input type="hidden" value="1" name="step" id="step" />
                <label for="title">Title: </label>
                <input type="text" name="title" id="title" value="@researchProjectsViewModel.Title" />

                <label for="description">Description: </label>
                <textarea name="description" id="description">@researchProjectsViewModel.Description</textarea>

                <label for="startDate">Start date: </label>
                <input name="startDate" id="startDate" type="text" value="@researchProjectsViewModel.StartDate" data-date-format="dd/mm/yyyy" class="datepicker" />

                <label for="endDate">End date: </label>
                <input name="endDate" id="endDate" type="text" value="@researchProjectsViewModel.EndDate" data-date-format="dd/mm/yyyy" class="datepicker" />

                <input type="submit" value="Next" />
            </form>
        </div>
                break;

            case 1:
                // Select Team Members
        <div class="well">
            <h1>Select who is in your team:</h1>
            <form action="addResearchProject.cshtml" class="form-horizontal" method="post">
                <input type="hidden" value="2" name="step" id="step" />
                <ul>
                    @foreach (var member in members)
                    {
                        <li>
                            <input type="checkbox" name="@member.EMail" />
                            @(member.ToString())
                        </li>
                    }
                </ul>
                <input type="submit" value="Next" />
            </form>
        </div>
                    break;

            case 3:
                    // Show Research Project Details
        <div class="well">
            <h1>@researchProjectsViewModel.ResearchProject.Title</h1>
            <p>
                <b>Start date:</b> @researchProjectsViewModel.ResearchProject.StartDate.ToString("d MMM yyyy")<br />
                <b>End date:</b> @researchProjectsViewModel.ResearchProject.EndDate.ToString("d MMM yyyy")
            </p>
            <p>
                @researchProjectsViewModel.ResearchProject.Description
            </p>

            <h2>Team:</h2>
            <ul style="margin: 0 0 30px;">
                @foreach (Member member in researchProjectsViewModel.ResearchProject.Team)
                {
                    <li>@member.ToString()</li>
                }
            </ul>
            <div>
                <form action="addResearchProject.cshtml" style="display: inline;" method="post">
                    <input type="hidden" value="4" name="step" id="step" />
                    <input type="submit" value="Add phase" />
                </form>
                <form action="addResearchProject.cshtml" style="display: inline;" method="post">
                    <input type="hidden" value="@lastStep" name="step" id="step" />
                    <input type="submit" value="Submit Research Project" />
                </form>
            </div>
        </div>
    
                if (researchProjectsViewModel.HasPhases)
                {
        <div class="well">
            <h2>Phases</h2>
            @foreach (ResearchPhase phase in researchProjectsViewModel.ResearchPhases)
            {
                <div class="activityContainment">
                    <h2>@phase.Title</h2>
                    <p>
                        @phase.Description
                    </p>
                    <p>
                        <b>Start date: </b>@phase.StartDate.ToString("d MMM yyyy")
                        <br />
                        <b>End date: </b>@phase.EndDate.ToString("d MMM yyyy")
                    </p>
                    @if (phase.HasActivities)
                    {
                        if (phase.Count > 0)
                        {
                        <h3>Activities</h3>
                            foreach (ResearchActivity researchActivity in phase)
                            {
                        <div class="activityContainment">
                            <h4>@researchActivity.Title</h4>
                            <p>
                                @researchActivity.Description
                            </p>
                            <p>
                                <b>Start date: </b>@researchActivity.StartDate.ToString("d MMM yyyy")<br />
                                <b>End date: </b>@researchActivity.EndDate.ToString("d MMM yyyy")<br />
                                <b>Labor cost: </b>@researchActivity.LaborCost.Value @researchActivity.LaborCost.Currency.ToString()<br />
                                <b>Logistical cost: </b>@researchActivity.LogisticalCost.Value @researchActivity.LogisticalCost.Currency.ToString()<br />
                                <b>Mobility cost: </b>@researchActivity.MobilityCost.Value @researchActivity.MobilityCost.Currency.ToString()<br />
                                <b>Is confidential: </b>@(researchActivity.IsConfidential ? "Yes" : "No")<br />
                                <b>Assignee@(researchActivity.AssigneeCount > 1 ? "s" : ""):</b> @string.Join(", ", researchActivity.Select((assignee) => assignee.Name))
                            </p>
                            @if (researchActivity.ClassRooms.Count > 0)
                            {
                                <p>
                                    Class rooms used: @string.Join(", ", researchActivity.ClassRooms.Select((classRoom) => classRoom.Name));
                                </p>
                            }
                            @if (researchActivity.Equipments.Count > 0)
                            {
                                <p>
                                    Equipment used: @string.Join(", ", researchActivity.Equipments.Select((equipment) => string.Format("{0} {1} ({2})", equipment.Brand, equipment.Model, equipment.SerialNumber)));
                                </p>
                            }
                        </div>
                            }
                        }
                    }
                </div>
            }
        </div>
                }

                break;

            case 4:
                // Show Research Phase Form
        <div class="well">
            <form class="form-horizontal" action="/addResearchProject.cshtml" method="post">
                <input type="hidden" name="step" id="step" value="5" />

                <label for="title">Title: </label>
                <input type="text" name="title" id="title" value="@researchProjectsViewModel.Title" />

                <label for="description">Description: </label>
                <textarea name="description" id="description">@researchProjectsViewModel.Description</textarea>

                <label for="startDate">Start date: </label>
                <input name="startDate" id="startDate" type="text" value="@researchProjectsViewModel.StartDate" data-date-format="dd/mm/yyyy" class="datepicker" />

                <label for="endDate">End date: </label>
                <input name="endDate" id="endDate" type="text" value="@researchProjectsViewModel.EndDate" data-date-format="dd/mm/yyyy" class="datepicker" />

                <input type="submit" value="Add phase" />
            </form>
        </div>
                break;

            case 6:
                // Show Research Phase Details
        <div class="well">
            <h3>@researchProjectsViewModel.CurrentPhase.Title</h3>
            <p>
                <b>Start date: </b>@researchProjectsViewModel.CurrentPhase.StartDate.ToString("d MMM yyy")<br />
                <b>End date: </b>@researchProjectsViewModel.CurrentPhase.EndDate.ToString("d MMM yyyy")
            </p>
            <p>
                @researchProjectsViewModel.CurrentPhase.Description
            </p>
            <form action="addResearchProject.cshtml" style="display: inline;" method="post">
                <input type="hidden" value="7" name="step" id="step" />
                <input type="submit" value="Add activity" />
            </form>
            <form action="addResearchProject.cshtml" style="display: inline;" method="post">
                <input type="hidden" value="3" name="step" id="step" />
                <input type="submit" value="Submit phase" />
            </form>
        </div>
                if (researchProjectsViewModel.CurrentPhase.HasActivities)
                {
                    
        <div class="well">
            <h3>Activities</h3>
            @foreach (ResearchActivity researchActivity in researchProjectsViewModel.CurrentPhase)
            {
                <div class="activityContainment">
                    <h3>@researchActivity.Title</h3>
                    <p>
                        @researchActivity.Description
                    </p>
                    <p>
                        <b>Start date: </b>@researchActivity.StartDate.ToString("d MMM yyyy")<br />
                        <b>End date: </b>@researchActivity.EndDate.ToString("d MMM yyyy")<br />
                        <b>Labor cost: </b>@researchActivity.LaborCost.Value @researchActivity.LaborCost.Currency.ToString()<br />
                        <b>Logistical cost: </b>@researchActivity.LogisticalCost.Value @researchActivity.LogisticalCost.Currency.ToString()<br />
                        <b>Mobility cost: </b>@researchActivity.MobilityCost.Value @researchActivity.MobilityCost.Currency.ToString()<br />
                        <b>Is confidential: </b>@(researchActivity.IsConfidential ? "Yes" : "No")<br />
                        <b>Assignee@(researchActivity.AssigneeCount > 1 ? "s" : ""):</b> @string.Join(", ", researchActivity.Select((assignee) => assignee.Name))
                    </p>
                    @if (researchActivity.ClassRooms.Count > 0)
                    {
                        <p>
                            Class rooms used: @string.Join(", ", researchActivity.ClassRooms.Select((classRoom) => classRoom.Name));
                        </p>
                    }
                    @if (researchActivity.Equipments.Count > 0)
                    {
                        <p>
                            Equipment used: @string.Join(", ", researchActivity.Equipments.Select((equipment) => string.Format("{0} {1} ({2})", equipment.Brand, equipment.Model, equipment.SerialNumber)));
                        </p>
                    }
                </div>
            }
        </div>
                }
                break;

            case 7:
                // Show Research Activity from
        <form class="form-horizontal" action="/addResearchProject.cshtml" method="post">
            <div>
                <input type="hidden" name="step" id="step" value="8" />

                <label for="title">Title: </label>
                <input type="text" name="title" id="title" value="@researchProjectsViewModel.Title" />

                <label for="description">Description: </label>
                <textarea name="description" id="description">@researchProjectsViewModel.Description</textarea>

                <label for="startDate">Start date: </label>
                <input name="startDate" id="startDate" type="text" value="@researchProjectsViewModel.StartDate" data-date-format="dd/mm/yyyy" class="datepicker" />

                <label for="endDate">End date: </label>
                <input name="endDate" id="endDate" type="text" value="@researchProjectsViewModel.EndDate" data-date-format="dd/mm/yyyy" class="datepicker" />

                <label for="laborCost">Labor cost: </label>
                <input type="number" value="@researchProjectsViewModel.LaborCost" name="LaborCost" id="LaborCost" />
                <select name="LaborCostSelectedIndex" id="LaborCostSelectedIndex">
                    @for (int i = 0; i < researchProjectsViewModel.Currency.Length; i++)
                    {
                        <option value="@i">@researchProjectsViewModel.Currency[i]</option>
                    }
                </select>

                <label for="mobilityCost">Mobility cost: </label>
                <input type="number" value="@researchProjectsViewModel.MobilityCost" name="MobilityCost" id="MobilityCost" />
                <select name="MobilityCostSelectedIndex" id="MobilityCostSelectedIndex">
                    @for (int i = 0; i < researchProjectsViewModel.Currency.Length; i++)
                    {
                        <option value="@i">@researchProjectsViewModel.Currency[i]</option>
                    }
                </select>

                <label for="logisticalCost">Mobility cost: </label>
                <input type="number" value="@researchProjectsViewModel.LogisticalCost" name="LogisticalCost" id="LogisticalCost" />
                <select name="LogisticalCostSelectedIndex" id="LogisticalCostSelectedIndex">
                    @for (int i = 0; i < researchProjectsViewModel.Currency.Length; i++)
                    {
                        <option value="@i">@researchProjectsViewModel.Currency[i]</option>
                    }
                </select>

                <p style="margin: 10px 0 0;">
                    Is confidential:
                <input type="checkbox" @(researchProjectsViewModel.IsConfidential ? "checked=\"checked\"" : "") name="isConfidential" id="isConfidential" />
                </p>

                <h5>Team members participating to this activity: </h5>
                @foreach (Member teamMember in researchProjectsViewModel.ResearchProject.Team)
                {
                    <p>
                        <input type="checkbox" name="@teamMember.EMail" />@teamMember.ToString()
                    </p>
                }
            </div>
            <div style="margin: 10px 0 0;">
                <input type="submit" value="Submit activity" />
            </div>
        </form>
                break;
        }
    }
}
