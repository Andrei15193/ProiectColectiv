@using ResourceManagementSystem.BusinessLogic.Entities;
@using ResourceManagementSystem.BusinessLogic.Workflow;

@{   
    Layout = "~/Views/Layouts/_MainLayout.cshtml";
    Page.Title = "Add Task";

    int step = 0;
    const int lastStep = 3;
    string errorMessage;
    string requestStep = IsPost ? Request["step"] : null;
    if (requestStep == null || !int.TryParse(requestStep, out step) || step > lastStep)
    {
        step = 0;
    }
    TasksViewModel tasksViewModel = Session["taskViewModel"] as TasksViewModel ?? ViewModelFactory.TasksViewModel;
    Session["taskViewModel"] = tasksViewModel;

    switch (step)
    {
        case 0:

            break;
        case 1:
            tasksViewModel.Description = Request["description"];
            tasksViewModel.EndDate = DateTime.Parse(Request["endDate"]);
            tasksViewModel.LaborCost = Request["laborCost"].Length > 0 ? int.Parse(Request["laborCost"]) : 0;
            tasksViewModel.LaborCostSelectedIndex = int.Parse(Request["laborCostCurrency"]);
            
            tasksViewModel.LogisticalCost = Request["logisticalCost"].Length > 0 ? int.Parse(Request["logisticalCost"]) : 0;
            tasksViewModel.LogisticalCostSelectedIndex = int.Parse(Request["logisticalCostCurrency"]);
            
            tasksViewModel.MobilityCost = Request["MobilityCost"].Length > 0 ? int.Parse(Request["MobilityCost"]) : 0;
            tasksViewModel.MobilityCostSelectedIndex = int.Parse(Request["MobilityCostCurrency"]);
            
            tasksViewModel.StartDate = DateTime.Parse(Request["startDate"]);
            tasksViewModel.Title = Request["title"];
            tasksViewModel.TaskTypeSelectedIndex = int.Parse(Request["type"]);

            break;
        case 2:

            break;

        case 3:
            //Session["taskViewModel"] =
            //tasksViewModel.TeamsVM = Request["teachingPosition"] == null ? 0 : Convert.ToInt32(Request["teachingPosition"]);
            break;
    }
}

@section body{
    <ul class="nav nav-tabs">
        <li class="active"><a>Add</a></li>

    </ul>

    <div class="progress progress-info progress-striped breadcrumb"></div>

    <div class="well">
        @if (members != null)
        {
            <ul>
                @foreach (var member in members)
                {
                    <li>@(member is Teacher ? ((member as Teacher).HasPhD ? "Dr. " : "") : "") @member.Name, @(member is Teacher ? (member as Teacher).Position.ToString() : member.Type.ToString()) [Contact: @member.EMail]</li>
                }
            </ul>
            <form action="addHumanResource.cshtml" class="form-horizontal" method="post">
                @switch (step)
                {
                    case 0:
                    <input type="hidden" value="@(step + 1)" name="step" id="step" />
                    <label for="name">Name:</label>
                    <input type="text" name="name" id="name" />
                
                    <label for="email">Email:</label>
                    <input type="email" name="email" id="email" />
                
                    <label for="password">Password:</label>
                    <input type="password" name="password" id="password" />
                        
                    <label for="memberType">Member type:</label>
                    <select name="memberType" id="memberType">
                        @for (int i = 0; i < humanResourcesViewModel.MemberTypes.Length; i++)
                        {
                            <option value="@i">@humanResourcesViewModel.MemberTypes[i]</option>
                        }
                    </select>
                    <input type="submit" value="Next" />
                        break;

                    case 1:
                        switch (((MemberType)Convert.ToInt32(Request["memberType"])))
                        {
                            case MemberType.Administrator:
                                if (humanResourcesViewModel.TryAddMember(out errorMessage))
                                {
                    <h1>Success!</h1>
                    <p>The administrator @humanResourcesViewModel.Name has been added to human resources!</p>
                                }
                                else
                                {
                    <h1>Error!</h1>
                    <p>Could not add administrator @humanResourcesViewModel.Name! @errorMessage</p>
                                }
                    <input type="submit" value="Finish" />
                                break;

                            case MemberType.Director:
                                if (humanResourcesViewModel.TryAddMember(out errorMessage))
                                {
                    <h1>Success!</h1>
                    <p>The director @humanResourcesViewModel.Name has been added to human resources!</p>
                                }
                                else
                                {
                    <h1>Error!</h1>
                    <p>Could not add director @humanResourcesViewModel.Name! @errorMessage</p>
                                }
                    <input type="submit" value="Finish" />
                                break;

                            case MemberType.PhD_Student:
                    <input type="hidden" value="@(step + 1)" name="step" id="step" />
                    <label for="address">Address:</label>
                    <input type="text" name="address" id="address" />
                
                    <label for="telephone">Telephone:</label>
                    <input type="text" name="telephone" id="telephone" />
                
                    <label for="website">Website:</label>
                    <input type="text" name="website" id="website" />
                
                    <label for="domainsOfInterest">Domains of interest:</label>
                    <textarea name="domainsOfInterest" id="domainsOfInterest"></textarea>
                    <input type="submit" value="Next" />
                                break;

                            case MemberType.Teacher:
                    <input type="hidden" value="@lastStep" name="step" id="step" />
                    <label for="address">Address:</label>
                    <input type="text" name="address" id="address" />
                
                    <label for="telephone">Telephone:</label>
                    <input type="text" name="telephone" id="telephone" />
                
                    <label for="website">Website:</label>
                    <input type="text" name="website" id="website" />
                
                    <label for="domainsOfInterest">Domains of interest:</label>
                    <textarea name="domainsOfInterest" id="domainsOfInterest"></textarea>
                        
                    <label for="teachingPosition">Teaching position:</label>
                    <select name="teachingPosition" id="teachingPosition">
                        @for (int i = 0; i < humanResourcesViewModel.TeachingPositions.Length; i++)
                        {
                            <option value="@i">@humanResourcesViewModel.TeachingPositions[i]</option>
                        }
                    </select>
                
                    <label for="hasPhD">Has PhD:</label>
                    <input type="checkbox" checked="checked" name="hasPhD" id="hasPhD" />
                    <input type="submit" value="Next" />
                        break;
                        }
                        break;

                    case 2:
                        if (humanResourcesViewModel.TryAddMember(out errorMessage))
                        {
                    <h1>Success!</h1>
                    <p>The member @humanResourcesViewModel.Name has been successfully added!</p>
                        }
                        else
                        {
                    <h1>Error!</h1>
                    <p>The member @humanResourcesViewModel.Name could not be added! @errorMessage</p>
                        }
                    <input type="submit" value="Finish" />
                        break;
                }
            </form>
        }
        else
        {
            <h1>Error!</h1>
            <p>@errorMessage</p>
            <p>We are terebly sorry for the inconvenience...</p>
        }
    </div>
}
