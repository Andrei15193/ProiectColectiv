@using ResourceManagementSystem.BusinessLogic.Entities;
@using ResourceManagementSystem.BusinessLogic.Entities.Collections;
@using ResourceManagementSystem.BusinessLogic.Workflow;

@{   
    Layout = "~/Views/Layouts/_MainLayout.cshtml";
    Page.Title = "Aprove Activities";

    <!--   int step = 0;
    const int lastStep = 2;
    string errorMessage;
    string requestStep = IsPost ? Request["step"] : null;
    if (requestStep == null || !int.TryParse(requestStep, out step) || step > lastStep)
    {
        step = 0;
    }-->
    string errorMessage;
    ActivitiesViewModel activitiesViewModel = Session["activitiesViewModel"] as ActivitiesViewModel ?? ViewModelFactory.ActivitiesViewModel;
    Session["activitiesViewModel"] = activitiesViewModel;
    IEnumerable<AbstractActivity> activities = activitiesViewModel.TryGetAll(out errorMessage);
    AbstractActivity selectedActivity = null;

    if (Request["id"] != null && activities != null)
    {
        int id = int.Parse(Request["id"]);
        selectedActivity = activities.Where((activity) => activity.Id == id).First();
    }
    
    <!--switch (step)
    {
        case 0:

            break;
        case 1:
          

            break;
      
    }-->
}
@section body{
    <ul class="nav nav-tabs">
        <li class="active"><a>Aprove activities</a></li>

    </ul>


    @if (activities != null)
    {
        <div class="well">
            @if (selectedActivity == null)
            {
                <ul>
                    @foreach (var activity in activities)
                    {
                        <li><a href="aproveActivities.cshtml?id=@activity.Id">@activity.Title</a>&nbsp; <b>Description&nbsp;:&nbsp; </b>@activity.Description &nbsp; <b>StartDate&nbsp;:&nbsp; </b>@activity.StartDate.ToString("dd-mm-yyyy") &nbsp; <b>EndDate&nbsp;:&nbsp;</b>@activity.EndDate.ToString("dd-mm-yyyy")&nbsp;</li>
                    }
                </ul>
            }
            else
            {
                 foreach (var activity in activities)
                 { switch (selectedActivity.Type)
                    {
                    case ActivityType.Administrative:
                        AdministrativeActivity administrativeActivity = activity as AdministrativeActivity;
                <h3>@selectedActivity.Title</h3>
                <p>
                    <b>Description:</b><br />@selectedActivity.Description<br />
                    <b>Start date:</b> @selectedActivity.StartDate<br />
                    <b>End date:</b> @selectedActivity.EndDate
                </p>
                <h4>Tasks:</h4>
                        foreach (TaskBreakdownActivity taskBreak in administrativeActivity.BreakdownActvities)
                        {foreach (Task task in taskBreak)
                {
                <p>
                    <b>Title:</b>@task.Title<br />
                    <b>Labor cost: </b>@task.LaborCost.Value @task.LaborCost.Currency<br />
                    <b>Logistical cost: </b>@task.LogisticalCost.Value @task.LogisticalCost.Currency<br />
                    <b>Mobility cost: </b>@task.MobilityCost.Value @task.MobilityCost.Currency
                </p>
                <h4>Class rooms required:</h4>
                <ul>
                    @foreach (ClassRoom classRoom in task.ClassRooms)
                    {
                        <li>@classRoom.Name</li>
                    }
                </ul>
                <h4>Equipment required</h4>
                <ul>
                    @foreach (Equipment equipment in task.Equipments)
                    {
                        <li>@equipment.Brand + @equipment.Model (@equipment.SerialNumber)</li>
                    }
                </ul>
                }
                <h3>Teams:</h3>
                        foreach (NamedTeam team in administrativeActivity.Teams)
                        {
                <h4>@team.Name:</h4>
                <ul>
                    @foreach (Member member in team)
                    {
                        <li>@member.ToString()</li>
                    }
                </ul>
            }
            }
            break;
            case ActivityType.Research_Project:
                ResearchProject researchProject=activity as ResearchProject;
                <h1>@researchProject.Title</h1>
            <p>
                <b>Start date:</b> @researchProject.StartDate.ToString("d MMM yyyy")<br />
                <b>End date:</b> @researchProject.EndDate.ToString("d MMM yyyy")
            </p>
            <p>@researchProject.Description</p>
            <h2>Team:</h2>
            <ul style="margin: 0 0 30px;">
                @foreach (Member member in researchProject.Team)
                {
                    <li>@member.ToString()</li>
                }
            </ul>
        
                if (researchProject.Count > 0)
                {
        <div class="well">
            <h2>Phases:</h2>
            @foreach (ResearchPhase phase in researchProject)
            {
                <h2>@phase.Title</h2>
                <p>
                    <b>Start date: </b>@phase.StartDate
                    <br />
                    <b>End date: </b>@phase.EndDate
                </p>
                <p>
                    @phase.Description
                </p>
                if (phase.Count > 0)
                {
                <div class="researchActivity">
                    @foreach (ResearchActivity activityy in phase)
                    {
                        <h3>@activityy.Title</h3>
                        <p>
                            <b>Start date: </b>@activityy.StartDate<br />
                            <b>End date: </b>@activityy.EndDate
                        </p>
                        @activityy.Description
                    }
                </div>
                }
            }
        </div>
            
                }
                break;
                        
                    case ActivityType.Didactic:
                        DidacticActivity didacticActivity = activity as DidacticActivity;
                <h4>Teachers:</h4>
                <ul>
                  
                           
                    
                </ul>
                    break;

                    case ActivityType.Research:

                        ResearchActivity researchActivity = activity as ResearchActivity;
                    // Copy & paste                        
                    break;

                    

                    case ActivityType.Student_Circle:

                    StudentCircle studentCircle = activity as StudentCircle;
                 
                    <h1>studentCircle.Title</h1>
                    <p>
                <b>Description:</b> studentCircle.Description<br />
                <b>Start date:</b> studentCircle.StartDate<br />
                <b>End date:</b> studentCircle.EndDate
                </p>
            
            
            <p>Study Program :studentCircle.StudyProgram.ToString()</p>
                    
                      
                    break;

                    default:
                    break;
                }

            }
            }
        </div>
    }
    else
    {
        <h1>Error!</h1>
        <p>@errorMessage</p>
        <p>We are terebly sorry for the inconvenience...</p>
    }

}
